generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Artist {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    image  String
    tracks Track[]
}

model Track {
    id         String      @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    artist     Artist      @relation(fields: [artistId], references: [id])
    artistId   String
    featuring  String[]
    image      String
    audio      String
    likedSongs LikedSong[]
}

model LikedSong {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    track   Track  @relation(fields: [trackId], references: [id])
    trackId String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
}

model User {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    likedSongs    LikedSong[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
